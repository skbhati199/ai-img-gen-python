name: Release Python SDK

on:
  push:
    tags:
      - 'v*'
    paths:
      - '.'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (patch, minor, major, or specific version)'
        required: true
        default: 'patch'

# Add global permissions
permissions:
  contents: write
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: './requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      # - name: Run tests
      #   run: pytest tests/

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-build-artifacts
          path: dist/

  publish-pypi:
    needs: build-and-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-build-artifacts
          path: dist

      - name: Version and publish (from tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          # Add a build number to avoid conflicts
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          VERSION="${VERSION}.post${BUILD_NUMBER}"
          sed -i "s/version=\"[0-9]*\.[0-9]*\.[0-9]*\"/version=\"$VERSION\"/g" setup.py
          # Clean and rebuild with new version
          rm -rf dist/*
          python -m build
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: ${{ '__token__' }}
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}

      - name: Version and publish (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            CURRENT_VERSION=$(grep -oP 'version="\K[0-9]+\.[0-9]+\.[0-9]+' setup.py)
            if [ "${{ github.event.inputs.version }}" == "patch" ]; then
              VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            elif [ "${{ github.event.inputs.version }}" == "minor" ]; then
              VERSION=$(echo $CURRENT_VERSION | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0;} 1' OFS=.)
            elif [ "${{ github.event.inputs.version }}" == "major" ]; then
              VERSION=$(echo $CURRENT_VERSION | awk -F. '{$1 = $1 + 1; $(NF-1) = 0; $NF = 0;} 1' OFS=.)
            else
              VERSION=$CURRENT_VERSION
            fi
          fi
          # Add a build number to avoid conflicts
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          VERSION="${VERSION}.post${BUILD_NUMBER}"
          sed -i "s/version=\"[0-9]*\.[0-9]*\.[0-9]*\"/version=\"$VERSION\"/g" setup.py
          # Clean and rebuild with new version
          rm -rf dist/*
          python -m build
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: ${{ '__token__' }}
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}

  create-github-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    # Add explicit permissions for this job
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-build-artifacts
          path: dist

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-config.json'
          commitMode: true
          toTag: ${{ github.ref }}
          fetchReleaseInformation: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Python SDK v${{ steps.get_version.outputs.VERSION }}
          body: |
            # Python SDK Release v${{ steps.get_version.outputs.VERSION }}

            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Installation
            ```
            pip install ai-img-gen-python==${{ steps.get_version.outputs.VERSION }}
            ```
          files: |
            dist/*
            README.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
